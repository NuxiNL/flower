// Copyright (c) 2017 Nuxi, https://nuxi.nl/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.

syntax = 'proto3';

package flower.protocol.switchboard;

enum Right {
  CLIENT_CONNECT = 0;
  EGRESS_START = 1;
  INGRESS_CONNECT = 2;
  RESOLVER_START = 3;
  SERVER_START = 4;
}

message ConstrainRequest {
  // Actions that are permitted to be performed on the new constrained
  // switchboard connection. These rights must be a subset of the rights
  // present on the existing switchboard connection.
  repeated Right rights = 1;

  // Labels that must be present on any incoming requests for them to be
  // received on the new switchboard connection. This affects
  // EgressStart(), ResolverStart() and ServerStart().
  map<string, string> in_labels = 2;

  // Labels that are automatically added to any outgoing requests. This
  // affects ClientConnect() and IngressConnect().
  map<string, string> out_labels = 3;
}

message ConstrainResponse {
  fd switchboard = 1;
}

message ClientConnectRequest {
  map<string, string> out_labels = 1;
}

message ClientConnectResponse {
  fd server = 1;
  map<string, string> connection_labels = 2;
}

message EgressStartRequest {
  map<string, string> in_labels = 1;
}

message EgressStartResponse {
  fd egress = 1;
}

message IngressConnectRequest {
  fd client = 1;
  map<string, string> out_labels = 2;
}

message IngressConnectResponse {
  map<string, string> connection_labels = 1;
}

message ResolverStartRequest {
  repeated string resolve_labels = 1;
  map<string, string> in_labels = 2;
  map<string, string> out_labels = 3;
}

message ResolverStartResponse {
  fd resolver = 1;
}

message ServerStartRequest {
  map<string, string> in_labels = 2;
}

message ServerStartResponse {
  fd server = 1;
}

service Switchboard {
  rpc Constrain(ConstrainRequest) returns (ConstrainResponse);

  rpc ClientConnect(ClientConnectRequest) returns (ClientConnectResponse);
  rpc EgressStart(EgressStartRequest) returns (EgressStartResponse);
  rpc IngressConnect(IngressConnectRequest) returns (IngressConnectResponse);
  rpc ResolverStart(ResolverStartRequest) returns (ResolverStartResponse);
  rpc ServerStart(ServerStartRequest) returns (ServerStartResponse);
}
